import faiss
import pandas as pd
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from collections import Counter
from collections import defaultdict

# 1. Load model, FAISS index, corpus v√† file mapping
model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
# model = SentenceTransformer("sentence-transformers/all-mpnet-base-v2")
index = faiss.read_index("corpus_index.faiss")
corpus = pd.read_csv("corpus_lines.csv", header=None)[0].tolist()

df_symptom = pd.read_excel("benh_trieu_chung_normalized.xlsx")
df_disease = pd.read_excel("benh_nhomthuoc_normalized.xlsx")
df_drug = pd.read_excel("nhomthuoc_thuoc_normalized.xlsx")

# 2. H√†m t√¨m ki·∫øm top c√¢u t∆∞∆°ng t·ª± t·ª´ FAISS + t√≠nh ƒëi·ªÉm cosine
def search_symptom(symptom_input, top_k=30):
    embedding = model.encode([symptom_input])
    D, I = index.search(embedding, top_k)
    results = []
    for idx in I[0]:
        matched_line = corpus[idx]
        if "Tri·ªáu ch·ª©ng:" in matched_line and "‚Üí C√≥ th·ªÉ li√™n quan ƒë·∫øn b·ªánh:" in matched_line:
            parts = matched_line.split("‚Üí")
            matched_symptom = parts[0].replace("Tri·ªáu ch·ª©ng:", "").strip()
            score = cosine_similarity(model.encode([symptom_input]), model.encode([matched_symptom]))[0][0]
            results.append((matched_line, matched_symptom, round(score, 3)))
    return results

# 3. Giao nhau c√°c b·ªánh t·ª´ nhi·ªÅu tri·ªáu ch·ª©ng (ho·∫∑c ch·ªçn b·ªánh kh·ªõp nhi·ªÅu tri·ªáu ch·ª©ng nh·∫•t)
def suggest_diseases(symptoms, min_score=0.6, top_k=3):
    all_disease_sets = []
    matched_symptom_logs = []
    all_matched_diseases = []

    for symptom in symptoms:
        matches = search_symptom(symptom)
        diseases = set()
        for matched_line, matched_symptom, score in matches:
            if (score < min_score): # n·∫øu ƒëi·ªÉm cosine nh·ªè h∆°n 0.7 th√¨ b·ªè qua (kh√¥ng ƒë·ªß ƒë·ªô tin c·∫≠y)
                continue
            parts = matched_line.split("‚Üí")
            disease = parts[1].replace("C√≥ th·ªÉ li√™n quan ƒë·∫øn b·ªánh:", "").strip()
            matched_symptom_logs.append({
                "input_symptom": symptom,
                "matched_symptom": matched_symptom,
                "disease": disease,
                "score": score
            })
            diseases.add(disease)
            all_matched_diseases.append(disease)
        if diseases:
            all_disease_sets.append(diseases)

    is_perfect_match_disease = False

    if not all_disease_sets:
        return set(), matched_symptom_logs, is_perfect_match_disease

    # Giao nhau
    common_diseases = set.intersection(*all_disease_sets)
    if common_diseases:
        is_perfect_match_disease = True
        if len(common_diseases) > top_k:
            # ch·ªâ l·∫•y ra 3 b·ªánh
            common_diseases = set(list(common_diseases)[:top_k])
        return common_diseases, matched_symptom_logs, is_perfect_match_disease

    # Kh√¥ng c√≥ giao nhau ‚Üí fallback: ch·ªçn b·ªánh xu·∫•t hi·ªán nhi·ªÅu nh·∫•t
    fallback_counter = Counter(all_matched_diseases)
    most_common = fallback_counter.most_common(top_k) # n·∫øu kh√¥ng c√≥ b·ªánh n√†o ph√π h·ª£p ho√†n to√†n th√¨ l·∫•y top 3 b·ªánh g·∫ßn ƒë√∫ng nh·∫•t
    fallback_diseases = set(disease for disease, count in most_common)
    return fallback_diseases, matched_symptom_logs, is_perfect_match_disease

# 4. G·ª£i √Ω nh√≥m thu·ªëc v√† t√™n thu·ªëc t·ª´ b·ªánh
def suggest_meds_and_drugs(disease):
    suggestions = []
    med_groups = df_disease[df_disease["B·ªánh"] == disease]["Nh√≥m thu·ªëc"].unique()
    for med in med_groups:
        suggestion = {
            "med_group": med,
            "drugs": []
        }
        drugs = df_drug[df_drug["Nh√≥m thu·ªëc"] == med]["T√™n thu·ªëc"].unique()
        for drug in drugs:
            suggestion["drugs"].append(drug)
        suggestions.append(suggestion)
    return suggestions

# 5. H√†m t·ªïng h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu v·ªÅ g·ª£i √Ω thu·ªëc
def get_all_data_suggestions(symptoms_input, min_score=0.6, top_k=3):

    # l·∫•y tri·ªáu ch·ª©ng t·ª´ user input
    symptoms = [] # data th·ª© 1
    matched_logs = [] # data th·ª© 2
    matched_symptoms = [] # data th·ª© 3
    diseases_result = [] # data th·ª© 4
    is_perfect_match_disease = False

    symptoms = symptoms_input

    # giao nhau c√°c b·ªánh t·ª´ nhi·ªÅu tri·ªáu ch·ª©ng
    common_diseases, matched_symptom_logs, is_perfect_match_disease = suggest_diseases(symptoms, min_score, top_k)

    if matched_symptom_logs:
        shown_pairs = set()
        for log in matched_symptom_logs:
            user_input_symptom = log["input_symptom"]
            matched_symptom = log["matched_symptom"]
            score = log["score"]

            pair_key = (user_input_symptom, matched_symptom)
            if pair_key not in shown_pairs:
                matched_logs.append(f"B·∫°n nh·∫≠p: '{user_input_symptom}' ‚Üí Kh·ªõp g·∫ßn v·ªõi: '{matched_symptom}' ({score * 100:.2f}%)")
                matched_symptoms.append(matched_symptom)
                shown_pairs.add(pair_key)

    if common_diseases:
        # Gom √°nh x·∫°: disease ‚Üí {input_symptom ‚Üí (matched_symptom, score cao nh·∫•t)}
        disease_to_input_symptom_map = defaultdict(dict)

        for log in matched_symptom_logs:
            disease = log["disease"]
            input_symptom = log["input_symptom"]
            matched_symptom = log["matched_symptom"]
            score = log["score"]

            if disease in common_diseases:
                # N·∫øu ch∆∞a c√≥ ho·∫∑c ƒëi·ªÉm m·ªõi cao h∆°n th√¨ ghi ƒë√®
                if (input_symptom not in disease_to_input_symptom_map[disease] or 
                    score > disease_to_input_symptom_map[disease][input_symptom][1]):
                    disease_to_input_symptom_map[disease][input_symptom] = (matched_symptom, score)

        # S·∫Øp x·∫øp theo s·ªë tri·ªáu ch·ª©ng g·ªëc kh·ªõp ƒë∆∞·ª£c
        sorted_diseases = sorted(
            disease_to_input_symptom_map.items(),
            key=lambda x: len(x[1]),
            reverse=True
        )

        for disease, input_map in sorted_diseases:
            formatted = [
                f"{matched_symptom} (t·ª´ '{input_symptom}' {score*100:.2f}%)"
                for input_symptom, (matched_symptom, score) in input_map.items()
            ]
            disase_result = {
                "disease": disease,
                "note": f"{len(formatted)} tri·ªáu ch·ª©ng kh·ªõp g·ªìm: {', '.join(formatted)}",
                "suggestions": suggest_meds_and_drugs(disease)
            }
            diseases_result.append(disase_result)

    data = {
        "min_score": min_score,
        "top_k": len(diseases_result),
        "symptoms_input": symptoms,
        "matched_logs": matched_logs,
        "matched_symptoms": matched_symptoms,
        "is_perfect_match_disease": is_perfect_match_disease,
        "diseases_result": diseases_result,
    }

    return data

# 6. CLI
if __name__ == "__main__":
    while True:
        user_input = input("\nü©∫ Nh·∫≠p tri·ªáu ch·ª©ng (c√°ch nhau b·ªüi 'v√†'): ").strip()
        if not user_input:
            break

        # X·ª≠ l√Ω ƒë·∫ßu v√†o
        symptoms_input = [s.strip() for s in user_input.split("v√†") if s.strip()]

        min_score = 0.6 # ƒëi·ªÉm tin c·∫≠y
        top_k = 3 # s·ªë b·ªánh g·∫ßn ƒë√∫ng nh·∫•t

        data = get_all_data_suggestions(symptoms_input, min_score, top_k)
        symptoms_input = data["symptoms_input"]
        matched_logs = data["matched_logs"]
        matched_symptoms = data["matched_symptoms"]
        diseases_result = data["diseases_result"]
        is_perfect_match_disease = data["is_perfect_match_disease"]
        min_score = data["min_score"]
        top_k = data["top_k"]

        # in ra c√°c tri·ªáu ch·ª©ng ƒëang x·ª≠ l√Ω (data 1)
        print(f"\nüîç ƒêang x·ª≠ l√Ω {len(symptoms_input)} tri·ªáu ch·ª©ng:")
        for symptom in symptoms_input:
            print(f"‚Ä¢ {symptom}")

        # in ra c√°c d√≤ng √°nh x·∫° tri·ªáu ch·ª©ng (data 2)
        if (matched_logs):
            print("\nüß† √Ånh x·∫° tri·ªáu ch·ª©ng g·∫ßn ƒë√∫ng:")
            for log in matched_logs:
                print(f"‚Ä¢ {log}")
        else:
            print("\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tri·ªáu ch·ª©ng ph√π h·ª£p.")

        # in ra c√°c tri·ªáu ch·ª©ng ph√π h·ª£p √°nh x·∫° ƒë∆∞·ª£c (data 3)
        if (matched_symptoms):
            print("\nC√°c tri·ªáu ch·ª©ng ph√π h·ª£p √°nh x·∫° ƒë∆∞·ª£c:")
            for matched_symptom in matched_symptoms:
                print(f"‚Ä¢ {matched_symptom}")

        if not diseases_result:
            print("\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·ªánh ph√π h·ª£p v·ªõi t·∫•t c·∫£ tri·ªáu ch·ª©ng.")
        else:
            # in k·∫øt qu·∫£ c√°c b·ªánh d·ª± ƒëo√°n
            if (is_perfect_match_disease):
                print("\nüìã D·ª± ƒëo√°n b·ªánh ph√π h·ª£p:")
            else:
                print("\nüìã C√°c b·ªánh d·ª± ƒëo√°n g·∫ßn ƒë√∫ng (x·∫øp theo s·ªë tri·ªáu ch·ª©ng kh·ªõp):")

            for disease_result in diseases_result:
                print(f"‚úÖ {disease_result['disease']}") 
                print(f"‚Üí {disease_result['note']}")

            # in ra c√°c g·ª£i √Ω nh√≥m thu·ªëc v√† s·∫£n ph·∫©m
            print("\nüíä G·ª£i √Ω nh√≥m thu·ªëc v√† s·∫£n ph·∫©m:")
            for disease_result in diseases_result:
                print(f"‚Ä¢ B·ªánh: {disease_result['disease']}")
                for suggestion in disease_result["suggestions"]:
                    print(f"  ‚Üí {suggestion['med_group']} ‚Üí S·∫£n ph·∫©m g·ª£i √Ω: {', '.join(suggestion['drugs'])}")