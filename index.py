print("‚úÖ App ƒëang kh·ªüi ƒë·ªông...")
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.concurrency import run_in_threadpool
from pydantic import BaseModel
from typing import List, Optional

from suggestions import get_all_data_suggestions
import os
import json
import requests
import time
from dotenv import load_dotenv
load_dotenv()

app = FastAPI(title="G·ª£i √Ω thu·ªëc theo tri·ªáu ch·ª©ng")

# C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# uvicorn index:app --reload --port 8088

class SymptomInput(BaseModel):
    user_input: Optional[str] = None
    min_score: Optional[float] = 0.6
    top_k: Optional[int] = 3

@app.get("/")
def root():
    result = {"code": 0, "message": "Welcome to the Disease Prediction API."}
    return JSONResponse(content=result, status_code=200)

@app.post("/suggestions")
async def predict_disease(input: SymptomInput):
    
    print(f"üîç Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu v·ªõi ƒë·∫ßu v√†o: {input}")
    
    if(not input.user_input or not input.user_input.strip()):
        result = {
            "code": 1,
            "message": "Vui l√≤ng nh·∫≠p tri·ªáu ch·ª©ng.",
            "data": []
        }
        return JSONResponse(content=result, status_code=400)
    
    # x·ª≠ l√Ω ƒë·∫ßu v√†o
    symptoms_input, message_error = await run_in_threadpool(
        get_symptoms_input_from_user_input, input.user_input.strip()
    )
    
    if message_error:
        result = {
            "code": 1,
            "message": message_error,
            "data": []
        }
        return JSONResponse(content=result, status_code=400)
    
    if not symptoms_input or len(symptoms_input) == 0:
        result = {
            "code": 1,
            "message": "Kh√¥ng c√≥ tri·ªáu ch·ª©ng n√†o ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn.",
            "data": []
        }
        return JSONResponse(content=result, status_code=400)
    
    print(f"üîç ƒêang x·ª≠ l√Ω {len(symptoms_input)} tri·ªáu ch·ª©ng: {symptoms_input}")

    data = await run_in_threadpool(get_all_data_suggestions, symptoms_input, input.min_score, input.top_k)


    if not data:
        result = {
            "code": 1,
            "message": "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu g·ª£i √Ω.",
            "data": []
        }
        return JSONResponse(content=result, status_code=404)
    
    result = {
            "code": 0,
            "message": "D·ª± ƒëo√°n b·ªánh th√†nh c√¥ng.",
            "data": data
    }
    return JSONResponse(content=result, status_code=200)

from typing import Tuple

def get_symptoms_input_from_user_input(user_input: str) -> Tuple[List[str], str]:
    
    API_KEY = os.getenv("GEMINI_API_KEY")
    MODELS = ["gemini-2.0-flash", "gemini-1.5-flash"]  # fallback n·∫øu model ƒë·∫ßu b·ªã l·ªói
    MAX_RETRIES = 3 # th·ª≠ g·ªçi t·ªëi ƒëa 3 l·∫ßn n·∫øu c√≥ l·ªói
    RETRY_DELAY = 5 # th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠
    if not API_KEY:
        print("Kh√¥ng t√¨m th·∫•y API key cho Gemini. Vui l√≤ng ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng.")
        return [], "Kh√¥ng t√¨m th·∫•y API key cho Gemini. Vui l√≤ng ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng."
    if not user_input or not user_input.strip():
        print("Kh√¥ng c√≥ ƒë·∫ßu v√†o ng∆∞·ªùi d√πng.")
        return [], "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu v√†o ng∆∞·ªùi d√πng."
    headers = {
        "Content-Type": "application/json",
        "X-goog-api-key": API_KEY
    }

    prompt = f"""
    Ph√¢n t√≠ch c√¢u sau v√† tr√≠ch xu·∫•t danh s√°ch c√°c tri·ªáu ch·ª©ng c√≥ trong ƒë√≥.

    Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·∫£ng JSON thu·∫ßn t√∫y g·ªìm c√°c chu·ªói, v√≠ d·ª•:
    ["tri·ªáu ch·ª©ng 1", "tri·ªáu ch·ª©ng 2"]

    Kh√¥ng c·∫ßn gi·∫£i th√≠ch g√¨ th√™m. Kh√¥ng in d·∫•u sao (*), kh√¥ng xu·ªëng d√≤ng.

    C√¢u: "{user_input}"
    """

    payload = {
        "contents": [
            {
                "parts": [
                    {"text": prompt}
                ]
            }
        ]
    }

    for model in MODELS:
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent"
        for attempt in range(MAX_RETRIES):
            try:
                print(f"ƒêang g·ªçi model: {model} (attempt {attempt + 1})")
                response = requests.post(url, headers=headers, json=payload)

                if response.status_code == 200:
                    text = response.json()["candidates"][0]["content"]["parts"][0]["text"]
                    print("Ph·∫£n h·ªìi Gemini:", text)
                    symptoms = json.loads(text)
                    if isinstance(symptoms, list):
                        return symptoms, None
                elif response.status_code == 429:
                    print(f"B·ªã gi·ªõi h·∫°n, ch·ªù {RETRY_DELAY}s r·ªìi th·ª≠ l·∫°i...")
                    time.sleep(RETRY_DELAY)
                    continue
                else:
                    print(f"L·ªói kh√¥ng mong mu·ªën: {response.status_code} - {response.text}")
                    break  # n·∫øu kh√¥ng ph·∫£i l·ªói quota th√¨ kh√¥ng th·ª≠ l·∫°i
            except Exception as e:
                print(f"L·ªói khi g·ªçi Gemini: {e}")
                break  # l·ªói kh√¥ng mong ƒë·ª£i th√¨ tho√°t lu√¥n

    print("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t tri·ªáu ch·ª©ng t·ª´ Gemini.")
    return [], "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t tri·ªáu ch·ª©ng t·ª´ Gemini. Vui l√≤ng th·ª≠ l·∫°i sau."